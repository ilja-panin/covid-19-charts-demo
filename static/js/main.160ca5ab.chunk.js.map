{"version":3,"sources":["components/chartsUtil.js","components/chartConstants.js","components/InlineLinearChart.js","components/DateGlobalAxises.js","components/CountryList.js","components/AxisX.js","components/AxisY.js","components/BubbleChart.js","components/Charts.js","App.js","reportWebVitals.js","index.js"],"names":["reduceCountryMaxMeasures","acc","dataPoint","maxNDeltaConfirmed","Math","max","nDeltaConfirmed","maxNDeltaDeaths","nDeltaDeaths","maxDeath2ConfPercent","reduceMaxMeasures","formatValue","value","toFixed","MAX_COLOR","CURRENT_COLOR","BUBBLE_CHART_WIDTH","BUBBLE_CHART_HEIGHT","InlineLinearChart","currentCountry","country","maxValue","measure","data","covidData","xScale","d3","range","yScale","rangeRound","domain","d","Date","line","x","y","current","length","currentY","maxPoint","find","maxY","maxX","style","display","width","height","transform","fill","stroke","strokeWidth","cx","cy","r","fillOpacity","x1","y1","x2","y2","strokeDasharray","textAnchor","fontSize","fontFamily","DATE_TICKS","AxisColumn","dataRange","xShift","map","date","moment","format","DateGlobalAxises","columns","firstLine","min","filter","getTime","cols","Array","from","keys","position","top","bottom","index","CountryRow","selectedCountry","maxValues","setSelectedCountry","population","toLocaleString","maximumFractionDigits","className","Country","onClick","CountryListHeader","CountryList","countries","countryData","Slug","AxisX","pixelsPerTick","name","ticks","useMemo","numberOfTicksTarget","floor","xOffset","join","AxisY","abs","yOffset","CountryPoint","id","SelectedCountryPoint","CountryOutRangePoint","direction","props","angle","dx","indexOf","dy","SelectedCountryOutRangePoint","CountryDetails","total","BubbleChart","measureX","measureY","axisXName","axisYName","getTotal","getValue","countiesForRender","concat","sort","a","b","topTotal5","pop","topValue5","outRange","xmin","xmax","ymin","ymax","selected","selectedOutRange","renderOutCountry","yValue","xValue","getOutRangeRender","renderSelectedOutCountry","getOutSelectedRangeRender","chardContainerStyle","minHeight","minWidth","margin","Charts","sorted","c","preparedCountryData","forEach","maxMeasures","reduce","chartMaxMetadata","getMaxValues","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAAMA,EAA4B,SAACC,EAAKC,GAIpC,OAHAD,EAAIE,mBAAqBC,KAAKC,IAAIJ,EAAIE,mBAAoBD,EAAUI,iBACpEL,EAAIM,gBAAkBH,KAAKC,IAAIJ,EAAIM,gBAAiBL,EAAUM,cAC9DP,EAAIQ,qBAAuB,GACpBR,GAkBX,IAAMS,EAAoB,SAAET,EAAKC,GAI7B,OAHAD,EAAIE,mBAAqBC,KAAKC,IAAIJ,EAAIE,mBAAoBD,EAAUC,oBACpEF,EAAIM,gBAAkBH,KAAKC,IAAIJ,EAAIM,gBAAiBL,EAAUK,iBAC9DN,EAAIQ,qBAAuBL,KAAKC,IAAIJ,EAAIQ,qBAAsBP,EAAUO,sBACjER,GAWJ,SAASU,EAAYC,GACxB,OAAOA,EAAMC,QAAQ,GCtClB,IACMC,EAAY,UACZC,EAAgB,UAEhBC,EAAqB,IACrBC,EAAsB,ICiEpBC,MA9Df,YAAyE,EAA7CC,eAA8C,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,QACrDC,EAAOH,EAAQI,UAEfC,EAASC,MAAeC,MAAM,CAAC,EANrB,MAOVC,EAASF,MAAiBG,WAAW,CAN1B,GAMyC,IAE1DJ,EAAOK,OAAOJ,IAAUH,GAAM,SAAUQ,GACpC,OAAO,IAAIC,KAAKD,EAAEC,UAGtBJ,EAAOE,OAAO,CAAC,EAAGT,IAGlB,IAAMY,EAAOP,MACRQ,GAAE,SAAUH,GACT,OAAON,EAAO,IAAIO,KAAKD,EAAEC,UAE5BG,GAAE,SAAUJ,GACT,OAAOH,EAAOG,EAAET,OAlB6C,EAqBrDI,IAAUH,GAAM,SAAAQ,GAAC,OAAIA,EAAET,MAA9BjB,EArB4D,oBAsB/D+B,EAAUb,EAAKA,EAAKc,OAAS,GAAGf,GAChCgB,EAAWV,EAAOQ,GAClBG,EAAWhB,EAAKiB,MAAK,SAAAT,GAAC,OAAIA,EAAET,KAAajB,KAEzCoC,EAAOb,EAAOvB,GACdqC,EAAOjB,EAAO,IAAIO,KAAKO,EAASP,OAGtC,OACI,qBAAKW,MAAO,CAACC,QAAS,OAAQC,MAAO,IAAKC,OAAQ,IAAlD,SACI,qBAAKH,MAAO,CAACE,MAAO,IAAKC,OAAQ,IAAjC,SACI,oBAAGC,UAAS,oBDzCY,ECyCZ,OAAZ,UACI,8BACI,sBAAMhB,EAAGE,EAAKV,GAAOoB,MAAO,CAACK,KAAM,OAAQC,OAAQ,UAAWC,YAAa,KAC3E,wBAAQC,GAAG,MAAMC,GAAId,EAAUe,EAAE,IAAIL,KAAMjC,EAAeuC,YAAa,KACrEb,GAAQ,EACH,wBAAQU,GAAIT,EAAMU,GAAIX,EAAMY,EAAE,IAAIL,KAAMlC,EAAWwC,YAAa,KAChE,mBAAGP,UAAS,oBAAeL,EAAf,SAAZ,SACC,sBAAMa,GAAG,IACHC,GAAG,MACHC,GAAG,IACHC,GAAG,KACHC,gBAAgB,IAChBhB,MAAO,CAACM,OAAQnC,EAAWoC,YAAa,UAK1D,oBAAGH,UAAU,mBAAb,UACI,sBAAMa,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAMjC,GAAgBoB,EAAG,GACvFD,EAAE,KADR,SACcvB,EAAYyB,KAC1B,sBAAMwB,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAMlC,GAAYqB,EAAE,KAClFD,EAAE,KADR,SACcvB,EAAYN,gB,iBCzD5C0D,EAAa,CACf,IAAI/B,KAAK,wBACT,IAAIA,KAAK,wBACT,IAAIA,KAAK,wBACT,IAAIA,KAAK,wBACT,IAAIA,KAAK,wBACT,IAAIA,KAAK,yBAGb,SAASgC,EAAT,GAAsD,IAAjCC,EAAgC,EAAhCA,UAAWxC,EAAqB,EAArBA,OAAqB,IAAbyC,cAAa,MAAJ,EAAI,EACjD,OAAQ,mBAAGnB,UAAS,oBAAemB,EAAf,QAAZ,SACHD,EAAUE,KACP,SAAAC,GACI,OAAO,eAAC,WAAD,WACH,sBAAMzB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAM,WACnDb,EAAG,GACHD,EAAGT,EAAO2C,GAAQ,EAFxB,SAIKC,IAAOD,GAAME,OAAO,SAEzB,sBAAM3B,MAAO,CAACkB,SAAU,EAAGC,WAAY,UAAWd,KAAM,WAClDb,EAAG,GACHD,EAAGT,EAAO2C,GAAQ,EAFxB,SAIKC,IAAOD,GAAME,OAAO,SAEzB,sBAAMf,GAAI9B,EAAO2C,GACXZ,GAAG,IACHC,GAAIhC,EAAO2C,GACXV,GAAG,OACHf,MAAO,CAACM,OAAQ,UAAWC,YAAa,OAjB5BkB,QAyBvB,SAASG,EAAT,GAAmD,IAAxBC,EAAuB,EAAvBA,QAASjD,EAAc,EAAdA,KAEzCkD,GAFuD,EAAR9B,MAEnCpB,EAAK,GAAGC,WACpBC,EAASC,MAAeC,MAAM,CAAC,EAAG,MAHqB,EAI1CD,IAAU+C,GAAW,SAAU1C,GAC9C,OAAO,IAAIC,KAAKD,EAAEC,SALuC,mBAItD0C,EAJsD,KAIjDrE,EAJiD,KAO7DoB,EAAOK,OAAO,CAAC4C,EAAKrE,IAEpB,IAAM4D,EAAYF,EAAWY,QAAO,SAAAP,GAChC,OAAOA,EAAKQ,UAAYF,EAAIE,WAAaR,EAAKQ,UAAYvE,EAAIuE,aAG5DC,EAAOC,MAAMC,KAAKD,MAAMN,GAASQ,QAEvC,OAAQ,qBAAKrC,MAAO,CAACsC,SAAU,WAAYnC,OAAQ,OAAQD,MAAiB,IAAV2B,EAAeU,IAAK,EAAGC,OAAQ,GAAzF,SACJ,4BACIN,EAAKV,KAAI,SAAAiB,GAAK,OAAI,cAACpB,EAAD,CAAwBC,UAAWA,EAAWxC,OAAQA,EAC1CyC,OAAQ,IAAMkB,EF7DhB,GE4DOA,UCvD/C,SAASC,EAAT,GAAgF,IAA3DC,EAA0D,EAA1DA,gBAAiBlE,EAAyC,EAAzCA,QAASmE,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,mBAChDC,GAAcrE,EAAQqE,WAAW,KAAMC,eAAe,QAAS,CAACC,sBAAsB,IACtFC,EAAYN,IAAoBlE,EAAQyE,QAAU,6CAA+C,mBAMvG,OAAQ,sBAAKD,UAAWA,EAAYE,QAJpB,WACZR,IAAoBlE,EAAQyE,QAAUL,EAAmB,MAASA,EAAmBpE,EAAQyE,UAGzF,UACJ,sBAAKD,UAAU,eAAf,UACI,8BAAMxE,EAAQyE,UACd,sBAAKD,UAAU,0BAAf,UAA0CH,EAA1C,UAEJ,8BACI,cAAC,EAAD,CAAmBrE,QAASA,EAASC,SAAUkE,EAAUpF,mBAAoBmB,QAAQ,sBAEzF,8BACI,cAAC,EAAD,CAAmBF,QAASA,EAASC,SAAUkE,EAAUhF,gBAAiBe,QAAQ,mBAEtF,8BACI,cAAC,EAAD,CAAmBF,QAASA,EAASC,SAAUkE,EAAU9E,qBAAsBa,QAAQ,2BAKnG,SAASyE,EAAT,GAAyC,IAAbR,EAAY,EAAZA,UACxB,OAAQ,sBAAKK,UAAU,qBAAf,UACJ,qBAAKjD,MAAO,CAACE,MAAO,OAEpB,sBAAK+C,UAAU,qBAAf,mCAEI,sBAAKA,UAAU,6BAAf,gCAEI,uBAFJ,aAEoBjF,EAAY4E,EAAUpF,oBAF1C,WAKJ,sBAAKyF,UAAU,qBAAf,oCAEI,sBAAKA,UAAU,6BAAf,gCAEI,uBAFJ,aAEoBjF,EAAY4E,EAAUhF,iBAF1C,WAKJ,sBAAKqF,UAAU,qBAAf,sCAEI,sBAAKA,UAAU,6BAAf,mCAC2BL,EAAU9E,qBADrC,eAyBGuF,MAlBf,YAAmF,IAA7DV,EAA4D,EAA5DA,gBAAiBW,EAA2C,EAA3CA,UAAWV,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,mBACzD,OACI,sBAAKI,UAAU,cAAf,UACI,cAACG,EAAD,CAAmBR,UAAWA,IAC9B,qBAAKK,UAAU,0BAAf,SACI,cAACrB,EAAD,CAAkBC,QAAS,EAAGjD,KAAM0E,MAExC,qBAAKL,UAAU,sBAAf,SACKK,EAAU9B,KAAI,SAAA+B,GAAW,OAAI,cAACb,EAAD,CACYC,gBAAmBA,EACnBE,mBAAoBA,EACpBD,UAAWA,EACXnE,QAAS8E,GAJJA,EAAYC,e,eCM5DC,EApED,SAAC,GAKM,IAAD,IAJJtE,cAII,MAJG,CAAC,EAAG,KAIP,MAHJH,aAGI,MAHE,CAAC,GAAI,KAGP,MAFJ0E,qBAEI,MAFY,GAEZ,MADJC,YACI,MADG,GACH,EACZC,EAAQC,mBAAQ,WACpB,IAAM/E,EAASC,MACZI,OAAOA,GACPH,MAAMA,GAEHkB,EAAQlB,EAAM,GAAKA,EAAM,GACzB8E,EAAsBrG,KAAKC,IAC/B,EACAD,KAAKsG,MACH7D,EAAQwD,IAIZ,OAAO5E,EAAO8E,MAAME,GACjBtC,KAAI,SAAAvD,GAAK,MAAK,CACbA,QACA+F,QAASlF,EAAOb,SAEnB,CACDkB,EAAO8E,KAAK,KACZjF,EAAMiF,KAAK,OAGb,OACE,qCACE,sBAAMrD,GAAI5B,EAAM,GACV8B,GAAI9B,EAAM,GAAIqB,KAAK,OACnBC,OAAO,SACZsD,EAAMpC,KAAI,gBAAGvD,EAAH,EAAGA,MAAO+F,EAAV,EAAUA,QAAV,OACT,oBAEE5D,UAAS,oBAAe4D,EAAf,QAFX,UAIE,sBACEjD,GAAG,IACHT,OAAO,SAET,sBAEEN,MAAO,CACLkB,SAAU,OACVD,WAAY,SACZb,UAAW,mBACXC,KAAM,QANV,SAQIpC,GAPGA,KARFA,MAmBT,mBAAGmC,UAAS,sBAAmBpB,EAAM,GAAKA,EAAM,IAAM,EAA1C,UAAZ,SACE,sBACEgB,MAAO,CACLkB,SAAU,OACVD,WAAY,SACZZ,KAAM,QAJV,SAMGsD,UCMIO,EApED,SAAC,GAKM,IAAD,IAJJ/E,cAII,MAJG,CAAC,EAAG,KAIP,MAHJH,aAGI,MAHE,CAAC,GAAI,KAGP,MAFJ0E,qBAEI,MAFY,GAEZ,MADJC,YACI,MADG,GACH,EAEV1E,EAASF,MACZI,OAAOA,GACPH,MAAMA,GAGHmB,EAASnB,EAAM,GAAKA,EAAM,GAC1B8E,EAAsBrG,KAAKC,IAC/B,EACAD,KAAK0G,IAAI1G,KAAKsG,MACZ5D,EAASuD,KAIPE,EAAQ3E,EAAO2E,MAAME,GACxBtC,KAAI,SAAAvD,GAAK,MAAK,CACbA,QACAmG,QAASnF,EAAOhB,OAGtB,OACE,qCACE,sBAAM2C,GAAK,IACLC,GAAI7B,EAAM,GACV+B,GAAI/B,EAAM,GAAIqB,KAAK,OACnBC,OAAO,SACZsD,EAAMpC,KAAI,gBAAGvD,EAAH,EAAGA,MAAOmG,EAAV,EAAUA,QAAV,OACT,oBAEEhE,UAAS,uBAAkBgE,EAAlB,MAFX,UAIE,sBACEtD,GAAG,KACHR,OAAO,SAET,sBAEEf,EAAI,MACJC,EAAI,IACJQ,MAAO,CACLkB,SAAU,OACVD,WAAY,MACZZ,KAAM,QAPV,SASIpC,GARGA,KARFA,MAoBT,mBAAGmC,UAAS,2BAAwBpB,EAAM,GAAKA,EAAM,IAAM,EAA/C,MAAZ,SACE,sBACEoB,UAAU,cACVJ,MAAO,CACLkB,SAAU,OACVD,WAAY,SACZZ,KAAM,QALV,SAOGsD,UCvDX,SAASU,EAAT,GAA4C,IAArB9E,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,EAAG2D,EAAc,EAAdA,QAASmB,EAAK,EAALA,GACpC,OAAO,wBAAQrB,UAAU,aAAazC,GAAIjB,EAAGkB,GAAIjB,EAAGkB,EAAE,IAAIL,KAAK,UAAUM,YAAa,GAAKwC,QAASA,EAASmB,GAAIA,IAGnH,SAASC,EAAT,GAAoD,IAArBhF,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,EAAG2D,EAAc,EAAdA,QAASmB,EAAK,EAALA,GAC5C,OAAO,wBAAQrB,UAAU,aAAazC,GAAIjB,EAAGkB,GAAIjB,EAAGkB,EAAE,IAAIL,KAAK,OAAOM,YAAa,GAAKwC,QAASA,EAASmB,GAAIA,IAGhH,SAASE,EAAT,GAAiE,IAAlCjF,EAAiC,EAAjCA,EAAGC,EAA8B,EAA9BA,EAA8B,IAA3BiF,iBAA2B,MAAf,GAAe,EAARC,EAAQ,qCAEzDC,EAAsB,OAAdF,EAAqB,GAAmB,MAAdA,EAAoB,GAAK,EAC3DG,EAAKH,EAAUI,QAAQ,MAAQ,EAAI,EAAI,EACvCC,EAAKL,EAAUI,QAAQ,MAAQ,EAAI,EAAI,EAE7C,OAAQ,2CAAGzE,UAAS,oBAAeb,EAAEqF,EAAjB,YAAuBpF,EAAEsF,EAAzB,MAAoCJ,GAAhD,IAAuDzB,UAAU,aAAjE,SACL,sBAAM7C,UAAS,iBAAYuE,EAAZ,KAAsBvF,EAAE,wBAAyBiB,KAAK,UAAUM,YAAa,QAIhG,SAASoE,EAAT,GAAuE,IAAhCxF,EAA+B,EAA/BA,EAAGC,EAA4B,EAA5BA,EAA4B,IAAzBiF,iBAAyB,MAAf,GAAe,EAARC,EAAQ,qCAE9DC,EAAsB,OAAdF,EAAqB,GAAmB,MAAdA,EAAoB,GAAK,EAC3DG,EAAKH,EAAUI,QAAQ,MAAQ,EAAI,EAAI,EACvCC,EAAKL,EAAUI,QAAQ,MAAQ,EAAI,EAAI,EAE7C,OAAQ,2CAAGzE,UAAS,oBAAeb,EAAEqF,EAAjB,YAAuBpF,EAAEsF,EAAzB,MAAoCJ,GAAhD,IAAuDzB,UAAU,aAAjE,SACN,sBAAM7C,UAAS,iBAAYuE,EAAZ,KAAsBvF,EAAE,4BAA6BiB,KAAK,OAAOM,YAAa,QAIjG,SAASqE,EAAeN,GAAQ,IACvBnF,EAA+BmF,EAA/BnF,EAAGC,EAA4BkF,EAA5BlF,EAAGf,EAAyBiG,EAAzBjG,QAASwG,EAAgBP,EAAhBO,MAAOhH,EAASyG,EAATzG,MAC7B,OAAO,qCACL,oBAAGmC,UAAS,oBAAeb,EAAI,EAAnB,YAAwBC,EAAI,EAA5B,KAAZ,UACE,sBAAMA,EAAE,IAAIyB,WAAW,MACjBjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,sBADxD,SACiF5B,IACjF,sBAAMe,EAAE,KAAKyB,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,sBAAhF,SACGrC,EAAYiH,KAEf,sBAAMzF,EAAE,KAAKyB,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,sBAAhF,SACGrC,EAAYC,QAGjB,oBAAGmC,UAAS,oBAAeb,EAAf,YAAoBC,EAApB,KAAZ,UACE,sBAAMA,EAAE,IAAIyB,WAAW,MACjBjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,mBADxD,SAC8E5B,IAC9E,sBAAMe,EAAE,KAAKyB,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,mBAAhF,SACGrC,EAAYiH,KAEf,sBAAMzF,EAAE,KAAKyB,WAAW,MAAMjB,MAAO,CAACkB,SAAU,GAAIC,WAAY,UAAWd,KAAK,mBAAhF,SACGrC,EAAYC,WA4DN,SAASiH,EAAYR,GAAQ,IAExC/B,EAOE+B,EAPF/B,gBACAW,EAMEoB,EANFpB,UACAT,EAKE6B,EALF7B,mBACAsC,EAIET,EAJFS,SACAC,EAGEV,EAHFU,SACAC,EAEEX,EAFFW,UACAC,EACEZ,EADFY,UAGIC,EAAW,SAAA9G,GAAO,OAAIA,EAAQI,UAAUJ,EAAQI,UAAUa,OAAS,GAAGyF,IAAa1G,EAAQqE,WAAa,MACxG0C,EAAW,SAAA/G,GAAO,OAAIA,EAAQ2G,IAEhCK,EAAoB,GAAGC,OAAOpC,GAElCmC,EAAkBE,MAAK,SAACC,EAAGC,GACzB,OAAIN,EAASK,GAAKL,EAASM,GAAW,EAClCN,EAASM,GAAKN,EAASK,IAAY,EAChC,KAGT,IAAME,EAAY,CAACL,EAAkBM,MACnCN,EAAkBM,MAClBN,EAAkBM,MAClBN,EAAkBM,MAClBN,EAAkBM,OAEpBN,EAAkBE,MAAK,SAACC,EAAGC,GACzB,OAAIL,EAASI,GAAKJ,EAASK,GAAW,EAClCL,EAASK,GAAKL,EAASI,IAAY,EAChC,KAET,IAAMI,EAAY,CAACP,EAAkBM,MACnCN,EAAkBM,MAClBN,EAAkBM,MAClBN,EAAkBM,MAClBN,EAAkBM,OAEdE,EAAW,GAAGP,OAAOI,EAAWE,GAChCpH,EAAO6G,EAEPxG,EAASF,MAAiBG,WAAW,CA1JxBZ,IA0JuC,IAEpDQ,EAASC,MAAeC,MAAM,CAAC,EA7JnBX,MAiHuB,EA6CtBU,IAAUH,EAAM2G,GA7CM,mBA6CpCW,EA7CoC,KA6C9BC,EA7C8B,KA8CzCA,GAAO,EACPrH,EAAOK,OAAO,CAAC+G,EAAMC,IA/CoB,MAiDtBpH,IAAUH,EAAM4G,GAjDM,mBAiDpCY,EAjDoC,KAiD9BC,EAjD8B,KAkDzCA,GAAO,EACPpH,EAAOE,OAAO,CAACiH,EAAMC,IAErB,IAAIC,EAAW,KACXC,EAAmB,KAEnB5D,IACF2D,EAAW1H,EAAKiB,MAAK,SAAApB,GAAO,OAAIA,EAAQyE,UAAYP,KACpD4D,EAAmBN,EAASpG,MAAK,SAAApB,GAAO,OAAIA,EAAQyE,UAAYP,MAGlE,IAAM6D,EAlHkB,SAAEhB,EAAUD,EAAUY,EAAME,EAAMvH,EAAQG,EAAQ4D,GAAlD,OAA0E,SAAApE,GAClG,IAAIgG,EAAY,GAEZgC,EAASjB,EAAS/G,GAClBgI,EAASJ,IACX5B,GAAa,IACbgC,EAASJ,GAGX,IAAIK,EAASnB,EAAS9G,GAMtB,OALIiI,EAASP,IACX1B,GAAa,IACbiC,EAASP,GAIT,cAAC3B,EAAD,CACErB,QAAS,kBAAMN,EAAmBpE,EAAQyE,UAE1CoB,GAAI7F,EAAQyE,QACZ3D,EAAGT,EAAO4H,GACVlH,EAAGP,EAAOwH,GACVhC,UAAWA,GAJNhG,EAAQyE,UAgGQyD,CAAkBnB,EAAUD,EAAUY,EAAME,EAAMvH,EAAQG,EAAQ4D,GACrF+D,EAxF0B,SAAEpB,EAAUD,EAAUY,EAAME,EAAMvH,EAAQG,EAAQ4D,GAAlD,OAA0E,SAAApE,GAC1G,IAAIgG,EAAY,GACZgC,EAASjB,EAAS/G,GAClBgI,EAASJ,IACX5B,GAAa,IACbgC,EAASJ,GAGX,IAAIK,EAASnB,EAAS9G,GAMtB,OALIiI,EAASP,IACX1B,GAAa,IACbiC,EAASP,GAIT,cAACpB,EAAD,CACE5B,QAAS,kBAAMN,EAAmB,OAElCyB,GAAI7F,EAAQyE,QACZ3D,EAAGT,EAAO4H,GACVlH,EAAGP,EAAOwH,GACVhC,UAAWA,GAJNhG,EAAQyE,UAuEgB2D,CAA0BrB,EAAUD,EAAUY,EAAME,EAAMvH,EAAQG,EAAQ4D,GAE3G,OACE,qBAAK3C,MAAO7B,EAAoB8B,OAAQ7B,EAAxC,SACE,oBAAG8B,UAAU,qBAAb,UACE,mBAAGA,UAAS,uBAnLC9B,IAmLD,KAAZ,SACE,cAAC,EAAD,CAAOa,OAAQ,CAAC+G,EAAMC,GAAOnH,MAAO,CAAC,EArL3BX,KAqL4CsF,KAAM0B,MAE9D,mBAAGjF,UAAS,kBAAZ,SACE,cAAC,EAAD,CAAOjB,OAAQ,CAACiH,EAAMC,GAAOrH,MAAO,CAvLzBV,IAuLwC,GAAIqF,KAAM2B,MAE9DG,EAAkBjE,KAAI,SAAA/C,GAAO,OAC5B,cAAC4F,EAAD,CAAclB,QAAS,kBAAMN,EAAmBpE,EAAQyE,UAE1CoB,GAAI7F,EAAQyE,QACZ3D,EAAGT,EAAOyG,EAAS9G,IACnBe,EAAGP,EAAOuG,EAAS/G,KAHdA,EAAQyE,YAM5BoD,GAAY,qCACX,cAAC/B,EAAD,CACsBpB,QAAS,kBAAMN,EAAmB,OAClCtD,EAAGT,EAAOyG,EAASe,IACnB9G,EAAGP,EAAOuG,EAASc,KAHdA,EAASpD,SAKpC,cAAC8B,EAAD,CAAgBvG,QAAS6H,EAASpD,QAClB3D,EAAGT,EAAOyG,EAASe,IAAa,EAChC9G,EAAGP,EAAOuG,EAASc,IACnBrB,MAAOM,EAASe,GAChBrI,MAAOuH,EAASc,QAKjCL,EAASzE,IAAIgF,GACbD,GAAoB,qCAClBK,EAAyBL,GAC1B,cAACvB,EAAD,CAAgBvG,QAAS8H,EAAiBrD,QAC1B3D,EAAGT,EAAOrB,KAAKsE,IAAIwD,EAASgB,GAAmBJ,IAAS,EACxD3G,EAAGP,EAAOxB,KAAKsE,IAAIyD,EAASe,GAAmBF,IAC/CpB,MAAOM,EAASgB,GAChBtI,MAAOuH,EAASe,aC3N1C,IAAMO,EAAsB,CAC1BC,UAAWzI,EACX6B,OAAQ7B,EACR4B,MAAO7B,EACP2I,SAAU3I,EACV4I,OAAQ,GAGK,SAASC,EAAOxC,GAC7B,OACE,sBAAKzB,UAAU,gBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKjD,MAAO8G,EAAZ,SACE,cAAC5B,EAAD,2BACMR,GADN,IAEES,SAAS,SACTE,UAAU,wBACVD,SAAS,MACTE,UAAU,WAGd,qBAAKtF,MAAO8G,EAAZ,SACE,cAAC5B,EAAD,2BACMR,GADN,IAEEU,SAAS,MACTE,UAAU,MACVH,SAAS,YACTE,UAAU,yCAIhB,sBAAKpC,UAAU,aAAf,UACE,qBAAKjD,MAAO8G,EAAZ,SACE,cAAC5B,EAAD,2BACMR,GADN,IAEEU,SAAS,UACTE,UAAU,6BACVH,SAAS,SACTE,UAAU,6BAGd,qBAAKrF,MAAO8G,EAAZ,SACE,cAAC5B,EAAD,2BACMR,GADN,IAEEU,SAAS,UACTE,UAAU,6BACVH,SAAS,YACTE,UAAU,4CC3CtB,ITD0C9B,ESCpC4D,EAAS5D,EACVvB,QAAQ,SAAAoF,GAAC,MAAkB,mBAAdA,EAAElE,SACK,WAAdkE,EAAElE,WAERyC,MAAK,SAACC,EAAGC,GACN,OAAID,EAAE1C,QAAU2C,EAAE3C,QAAgB,EAC9B2C,EAAE3C,QAAU0C,EAAE1C,SAAiB,EAC5B,KAGTmE,ITXoC9D,ESWY4D,GTVtCG,SAAS,SAAA7I,GACjB,IAAM8I,EAAc9I,EAAQI,UAAU2I,OAAQnK,EAA0B,CACpEG,mBAAoB,EACpBI,gBAAiB,EACjBE,qBAAsB,IAG1BW,EAAQjB,mBAAqB+J,EAAY/J,mBACzCiB,EAAQb,gBAAkB2J,EAAY3J,gBACtCa,EAAQX,qBAAuByJ,EAAYzJ,wBAExCyF,GSALkE,ETSC,SAAsBlE,GAMzB,OALkBA,EAAYiE,OAAOzJ,EAAmB,CACpDP,mBAAoB,EACpBI,gBAAiB,EACjBE,qBAAsB,ISbL4J,CAAaL,GAsBvBM,MApBf,WAAgB,IAAD,EACmCC,mBAAS,MAD5C,mBACJjF,EADI,KACaE,EADb,KAEX,OACI,sBAAKI,UAAU,MAAf,UACI,cAAC,EAAD,CACIK,UAAW+D,EACXzE,UAAW6E,EACX5E,mBAAoBA,EACpBF,gBAAiBA,IAErB,cAACuE,EAAD,CACI5D,UAAW+D,EACXzE,UAAW6E,EACX5E,mBAAoBA,EACpBF,gBAAiBA,QCvBlBkF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.160ca5ab.chunk.js","sourcesContent":["const reduceCountryMaxMeasures  = (acc, dataPoint ) => {\r\n    acc.maxNDeltaConfirmed = Math.max(acc.maxNDeltaConfirmed, dataPoint.nDeltaConfirmed);\r\n    acc.maxNDeltaDeaths = Math.max(acc.maxNDeltaDeaths, dataPoint.nDeltaDeaths);\r\n    acc.maxDeath2ConfPercent = 15 // Math.max(acc.maxDeath2ConfPercent, dataPoint.death2ConfPercent);\r\n    return acc;\r\n}\r\n\r\nexport function addMaxMetadataToCountries(countryData ) {\r\n    countryData.forEach( country => {\r\n        const maxMeasures = country.covidData.reduce( reduceCountryMaxMeasures, {\r\n            maxNDeltaConfirmed: 0,\r\n            maxNDeltaDeaths: 0,\r\n            maxDeath2ConfPercent: 0,\r\n        })\r\n\r\n        country.maxNDeltaConfirmed = maxMeasures.maxNDeltaConfirmed;\r\n        country.maxNDeltaDeaths = maxMeasures.maxNDeltaDeaths;\r\n        country.maxDeath2ConfPercent = maxMeasures.maxDeath2ConfPercent;\r\n    });\r\n    return countryData;\r\n}\r\n\r\nconst reduceMaxMeasures = ( acc, dataPoint ) => {\r\n    acc.maxNDeltaConfirmed = Math.max(acc.maxNDeltaConfirmed, dataPoint.maxNDeltaConfirmed);\r\n    acc.maxNDeltaDeaths = Math.max(acc.maxNDeltaDeaths, dataPoint.maxNDeltaDeaths);\r\n    acc.maxDeath2ConfPercent = Math.max(acc.maxDeath2ConfPercent, dataPoint.maxDeath2ConfPercent);\r\n    return acc;\r\n}\r\nexport function getMaxValues(countryData) {\r\n    const maxValues = countryData.reduce(reduceMaxMeasures, {\r\n        maxNDeltaConfirmed: 0,\r\n        maxNDeltaDeaths: 0,\r\n        maxDeath2ConfPercent: 0,\r\n    });\r\n    return maxValues;\r\n}\r\n\r\nexport function formatValue(value) {\r\n    return value.toFixed(2);\r\n}\r\n","export const INLINE_CHART_MARGIN_LEFT = 4\r\nexport const MAX_COLOR = '#ea381e';\r\nexport const CURRENT_COLOR = '#1616e8';\r\n\r\nexport const BUBBLE_CHART_WIDTH = 420;\r\nexport const BUBBLE_CHART_HEIGHT = 360;\r\n","import React from 'react'\r\nimport * as d3 from \"d3\";\r\nimport {formatValue} from \"./chartsUtil\";\r\nimport {CURRENT_COLOR, INLINE_CHART_MARGIN_LEFT, MAX_COLOR} from \"./chartConstants\";\r\n\r\nconst CHART_WIDTH = 130;\r\nconst CHART_HEIGHT = 35;\r\n\r\nfunction InlineLinearChart({currentCountry, country, maxValue, measure}) {\r\n    const data = country.covidData;\r\n\r\n    const xScale = d3.scaleTime().range([0, CHART_WIDTH]);\r\n    const yScale = d3.scaleLinear().rangeRound([CHART_HEIGHT, 0]);\r\n\r\n    xScale.domain(d3.extent(data, function (d) {\r\n        return new Date(d.Date)\r\n    }));\r\n\r\n    yScale.domain([0, maxValue]);\r\n    //yScale.domain(d3.extent(data, d  => d[measure]));\r\n\r\n    const line = d3.line()\r\n        .x(function (d) {\r\n            return xScale(new Date(d.Date));\r\n        })\r\n        .y(function (d) {\r\n            return yScale(d[measure]);\r\n        });\r\n\r\n    const [, max] = d3.extent(data, d => d[measure]);\r\n    const current = data[data.length - 1][measure];\r\n    const currentY = yScale(current);\r\n    const maxPoint = data.find(d => d[measure] === max);\r\n\r\n    const maxY = yScale(max);\r\n    const maxX = xScale(new Date(maxPoint.Date));\r\n\r\n\r\n    return (\r\n        <div style={{display: \"flex\", width: 180, height: 40}}>\r\n            <svg style={{width: 180, height: 50}}>\r\n                <g transform={`translate(${INLINE_CHART_MARGIN_LEFT},5)`}>\r\n                    <g>\r\n                        <path d={line(data)} style={{fill: 'none', stroke: '#777777', strokeWidth: 1}}/>\r\n                        <circle cx=\"130\" cy={currentY} r=\"4\" fill={CURRENT_COLOR} fillOpacity={0.8}/>\r\n                        {(maxY > -4)\r\n                            ? (<circle cx={maxX} cy={maxY} r=\"3\" fill={MAX_COLOR} fillOpacity={0.8}/>)\r\n                            : (<g transform={`translate(${maxX}, -3)`}>\r\n                                <line x1=\"0\"\r\n                                      y1=\"-10\"\r\n                                      x2=\"0\"\r\n                                      y2=\"40\"\r\n                                      strokeDasharray=\"4\"\r\n                                      style={{stroke: MAX_COLOR, strokeWidth: 1}}/>\r\n\r\n                            </g>)\r\n                        }\r\n                    </g>\r\n                    <g transform=\"translate(135,2)\">\r\n                        <text textAnchor=\"end\" style={{fontSize: 10, fontFamily: 'Courier', fill: CURRENT_COLOR}} y={25}\r\n                              x=\"40\">{formatValue(current)}</text>\r\n                        <text textAnchor=\"end\" style={{fontSize: 10, fontFamily: 'Courier', fill: MAX_COLOR}} y=\"15\"\r\n                              x=\"40\">{formatValue(max)}</text>\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InlineLinearChart;\r\n","import React, {Fragment} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport moment from \"moment\";\r\nimport {INLINE_CHART_MARGIN_LEFT} from \"./chartConstants\";\r\n\r\nconst DATE_TICKS = [\r\n    new Date(\"2019-09-01T00:00:00Z\"),\r\n    new Date(\"2020-01-01T00:00:00Z\"),\r\n    new Date(\"2020-03-01T00:00:00Z\"),\r\n    new Date(\"2020-06-01T00:00:00Z\"),\r\n    new Date(\"2020-09-01T00:00:00Z\"),\r\n    new Date(\"2021-01-01T00:00:00Z\"),\r\n]\r\n\r\nfunction AxisColumn({dataRange, xScale, xShift = 0}) {\r\n    return (<g transform={`translate(${xShift}, 0)`}>\r\n        {dataRange.map(\r\n            date => {\r\n                return <Fragment key={date}>\r\n                    <text style={{fontSize: 10, fontFamily: 'Courier', fill: '#555555'}}\r\n                          y={15}\r\n                          x={xScale(date) + 5}\r\n                    >\r\n                        {moment(date).format(\"MMM\")}\r\n                    </text>\r\n                    <text style={{fontSize: 9, fontFamily: 'Courier', fill: '#555555'}}\r\n                          y={25}\r\n                          x={xScale(date) + 5}\r\n                    >\r\n                        {moment(date).format(\"'YY\")}\r\n                    </text>\r\n                    <line x1={xScale(date)}\r\n                          y1=\"1\"\r\n                          x2={xScale(date)}\r\n                          y2=\"1500\"\r\n                          style={{stroke: '#dddddd', strokeWidth: 1}}/>\r\n                </Fragment>\r\n            }\r\n        )}\r\n\r\n    </g>)\r\n}\r\n\r\nexport default function DateGlobalAxises({columns, data, style}) {\r\n\r\n    const firstLine = data[0].covidData;\r\n    const xScale = d3.scaleTime().range([0, 130]);\r\n    const [min, max] = d3.extent(firstLine, function (d) {\r\n        return new Date(d.Date);\r\n    })\r\n    xScale.domain([min, max]);\r\n\r\n    const dataRange = DATE_TICKS.filter(date => {\r\n        return date.getTime() > min.getTime() && date.getTime() < max.getTime();\r\n    })\r\n\r\n    const cols = Array.from(Array(columns).keys());\r\n\r\n    return (<svg style={{position: 'relative', height: \"100%\", width: columns * 180, top: 0, bottom: 0}}>\r\n        <g>{\r\n            cols.map(index => <AxisColumn key={index} dataRange={dataRange} xScale={xScale}\r\n                                          xShift={180 * index + INLINE_CHART_MARGIN_LEFT}/>)\r\n        }\r\n        </g>\r\n    </svg>);\r\n}\r\n","import React from 'react'\r\nimport InlineLinearChart from \"./InlineLinearChart\";\r\nimport DateGlobalAxises from \"./DateGlobalAxises\";\r\nimport {formatValue} from \"./chartsUtil\";\r\n\r\nfunction CountryRow({selectedCountry, country, maxValues, setSelectedCountry}) {\r\n    const population = (country.population/1000).toLocaleString('en-US', {maximumFractionDigits:2})\r\n    const className = selectedCountry === country.Country ? 'country-list-row country-list-row-selected' : 'country-list-row';\r\n\r\n    const onClick = () => {\r\n        selectedCountry === country.Country ? setSelectedCountry(null) :  setSelectedCountry(country.Country);\r\n    }\r\n\r\n    return (<div className={className}  onClick={onClick}>\r\n        <div className='country-cell'>\r\n            <div>{country.Country}</div>\r\n            <div className='country-cell-population'>{population}k</div>\r\n        </div>\r\n        <div>\r\n            <InlineLinearChart country={country} maxValue={maxValues.maxNDeltaConfirmed} measure=\"nDeltaConfirmed\"/>\r\n        </div>\r\n        <div>\r\n            <InlineLinearChart country={country} maxValue={maxValues.maxNDeltaDeaths} measure=\"nDeltaDeaths\"/>\r\n        </div>\r\n        <div>\r\n            <InlineLinearChart country={country} maxValue={maxValues.maxDeath2ConfPercent} measure=\"death2ConfPercent\"/>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nfunction CountryListHeader({maxValues}) {\r\n    return (<div className='county-list-header'>\r\n        <div style={{width: 180}}>\r\n        </div>\r\n        <div className='inline-chat-header'>\r\n            Weekly confirmed cases\r\n            <div className='inline-chat-header-details'>\r\n                per 100k population\r\n                <br/>( maximum {formatValue(maxValues.maxNDeltaConfirmed)} )\r\n            </div>\r\n        </div>\r\n        <div className='inline-chat-header'>\r\n            Weekly confirmed deaths\r\n            <div className='inline-chat-header-details'>\r\n                per 100k population\r\n                <br/>( maximum {formatValue(maxValues.maxNDeltaDeaths)} )\r\n            </div>\r\n        </div>\r\n        <div className='inline-chat-header'>\r\n            % of lethal cases, weekly\r\n            <div className='inline-chat-header-details'>\r\n                ( maximum value shown {maxValues.maxDeath2ConfPercent}% )\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nfunction CountryList({selectedCountry, countries, maxValues, setSelectedCountry}) {\r\n    return (\r\n        <div className='county-list'>\r\n            <CountryListHeader maxValues={maxValues}/>\r\n            <div className='county-list-global-axis'>\r\n                <DateGlobalAxises columns={3} data={countries}/>\r\n            </div>\r\n            <div className='county-list-content'>\r\n                {countries.map(countryData => <CountryRow key={countryData.Slug}\r\n                                                          selectedCountry = {selectedCountry}\r\n                                                          setSelectedCountry={setSelectedCountry}\r\n                                                          maxValues={maxValues}\r\n                                                          country={countryData}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountryList;\r\n","import React, {useMemo} from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst AxisX = ({\r\n                domain=[0, 100],\r\n                range=[10, 290],\r\n                pixelsPerTick = 50,\r\n                name = ''\r\n              }) => {\r\n  const ticks = useMemo(() => {\r\n    const xScale = d3.scaleLinear()\r\n      .domain(domain)\r\n      .range(range)\r\n\r\n    const width = range[1] - range[0]\r\n    const numberOfTicksTarget = Math.max(\r\n      1,\r\n      Math.floor(\r\n        width / pixelsPerTick\r\n      )\r\n    )\r\n\r\n    return xScale.ticks(numberOfTicksTarget)\r\n      .map(value => ({\r\n        value,\r\n        xOffset: xScale(value)\r\n      }))\r\n  }, [\r\n    domain.join(\"-\"),\r\n    range.join(\"-\")\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      <line x1={range[0]}\r\n            x2={range[1]} fill=\"none\"\r\n            stroke=\"#aaa\" />\r\n      {ticks.map(({ value, xOffset }) => (\r\n        <g\r\n          key={value}\r\n          transform={`translate(${xOffset}, 0)`}\r\n        >\r\n          <line\r\n            y2=\"6\"\r\n            stroke=\"#aaa\"\r\n          />\r\n          <text\r\n            key={value}\r\n            style={{\r\n              fontSize: \"10px\",\r\n              textAnchor: \"middle\",\r\n              transform: \"translateY(20px)\",\r\n              fill: \"#aaa\"\r\n            }}>\r\n            { value }\r\n          </text>\r\n        </g>\r\n      ))}\r\n      <g transform ={ `translate( ${(range[0] + range[1]) / 2}, 45 )`} >\r\n        <text\r\n          style={{\r\n            fontSize: \"12px\",\r\n            textAnchor: \"middle\",\r\n            fill: \"#777\"\r\n          }}>\r\n          {name}\r\n        </text>\r\n      </g>\r\n    </>\r\n  )\r\n}\r\nexport default AxisX;\r\n","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst AxisY = ({\r\n                domain=[0, 100],\r\n                range=[10, 290],\r\n                pixelsPerTick = 50,\r\n                name = ''\r\n              }) => {\r\n\r\n    const yScale = d3.scaleLinear()\r\n      .domain(domain)\r\n      .range(range)\r\n\r\n\r\n    const height = range[1] - range[0];\r\n    const numberOfTicksTarget = Math.max(\r\n      1,\r\n      Math.abs(Math.floor(\r\n        height / pixelsPerTick\r\n      ))\r\n    )\r\n\r\n    const ticks = yScale.ticks(numberOfTicksTarget)\r\n      .map(value => ({\r\n        value,\r\n        yOffset: yScale(value)\r\n      }))\r\n\r\n  return (\r\n    <>\r\n      <line x1 = \"0\"\r\n            y1={range[0]}\r\n            y2={range[1]} fill=\"none\"\r\n            stroke=\"#aaa\" />\r\n      {ticks.map(({ value, yOffset }) => (\r\n        <g\r\n          key={value}\r\n          transform={`translate(0, ${yOffset} )`}\r\n        >\r\n          <line\r\n            x2=\"-6\"\r\n            stroke=\"#aaa\"\r\n          />\r\n          <text\r\n            key={value}\r\n            x = \"-10\"\r\n            y = \"4\"\r\n            style={{\r\n              fontSize: \"10px\",\r\n              textAnchor: \"end\",\r\n              fill: \"#aaa\"\r\n            }}>\r\n            { value }\r\n          </text>\r\n        </g>\r\n      ))}\r\n      <g transform ={ `translate( -50, ${(range[0] + range[1]) / 2} )`} >\r\n        <text\r\n          transform=\"rotate(-90)\"\r\n          style={{\r\n            fontSize: \"12px\",\r\n            textAnchor: \"middle\",\r\n            fill: \"#777\"\r\n          }}>\r\n          {name}\r\n        </text>\r\n      </g>\r\n    </>\r\n  )\r\n}\r\nexport default AxisY;\r\n","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {formatValue} from \"./chartsUtil\";\r\nimport AxisX from \"./AxisX\";\r\nimport AxisY from \"./AxisY\";\r\nimport {BUBBLE_CHART_HEIGHT, BUBBLE_CHART_WIDTH} from \"./chartConstants\";\r\n\r\nconst CHART_WIDTH = BUBBLE_CHART_WIDTH - 130;\r\nconst CHART_HEIGHT = BUBBLE_CHART_HEIGHT - 60;\r\n\r\nfunction CountryPoint({x, y, onClick, id}) {\r\n  return <circle className=\"data-point\" cx={x} cy={y} r=\"3\" fill=\"#a65628\" fillOpacity={0.3} onClick={onClick} id={id}/>\r\n}\r\n\r\nfunction SelectedCountryPoint({x, y, onClick, id}) {\r\n  return <circle className=\"data-point\" cx={x} cy={y} r=\"4\" fill=\"#0ff\" fillOpacity={0.8} onClick={onClick} id={id}/>\r\n}\r\n\r\nfunction CountryOutRangePoint({x, y, direction = '', ...props}) {\r\n\r\n const angle = direction === \"SE\" ? 45 : direction === \"E\" ? 90 : 0\r\n const dx = direction.indexOf('E') > -1 ? 8 : 0;\r\n const dy = direction.indexOf('S') > -1 ? 8 : 0;\r\n\r\n return (<g transform={`translate(${x+dx},${y-dy})`} {...props} className=\"data-point\">\r\n    <path transform={`rotate(${angle})`} d=\"M 0,-3 4,8 0,6 -4,8 z\"  fill=\"#ff0000\" fillOpacity={0.6}/>\r\n </g>)\r\n}\r\n\r\nfunction SelectedCountryOutRangePoint({x, y, direction='', ...props}) {\r\n\r\n  const angle = direction === \"SE\" ? 45 : direction === \"E\" ? 90 : 0\r\n  const dx = direction.indexOf('E') > -1 ? 8 : 0;\r\n  const dy = direction.indexOf('S') > -1 ? 8 : 0;\r\n\r\n  return (<g transform={`translate(${x+dx},${y-dy})`} {...props} className=\"data-point\">\r\n    <path transform={`rotate(${angle})`} d=\"M 0,-4 4.5,9 0,7 -4.5,9 z\"  fill=\"#0ff\" fillOpacity={0.8}/>\r\n  </g>)\r\n}\r\n\r\nfunction CountryDetails(props) {\r\n  const {x, y, country, total, value} = props\r\n  return <>\r\n    <g transform={`translate(${x + 1},${y + 1})`}>\r\n      <text y=\"8\" textAnchor=\"end\"\r\n            style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(255, 255, 255)`}}>{country}</text>\r\n      <text y=\"20\" textAnchor=\"end\" style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(255, 255, 255)`}}>\r\n        {formatValue(total)}\r\n      </text>\r\n      <text y=\"32\" textAnchor=\"end\" style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(255, 255, 255)`}}>\r\n        {formatValue(value)}\r\n      </text>\r\n    </g>\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text y=\"8\" textAnchor=\"end\"\r\n            style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(66, 66, 66)`}}>{country}</text>\r\n      <text y=\"20\" textAnchor=\"end\" style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(66, 66, 66)`}}>\r\n        {formatValue(total)}\r\n      </text>\r\n      <text y=\"32\" textAnchor=\"end\" style={{fontSize: 11, fontFamily: 'Courier', fill: `rgb(66, 66, 66)`}}>\r\n        {formatValue(value)}\r\n      </text>\r\n    </g>\r\n\r\n  </>\r\n}\r\n\r\nconst getOutRangeRender = ( getValue, getTotal, xmax, ymax, xScale, yScale, setSelectedCountry ) => country => {\r\n  let direction = '';\r\n\r\n  let yValue = getValue(country);\r\n  if (yValue > ymax) {\r\n    direction += \"S\";\r\n    yValue = ymax;\r\n  }\r\n\r\n  let xValue = getTotal(country);\r\n  if (xValue > xmax) {\r\n    direction += \"E\";\r\n    xValue = xmax;\r\n  }\r\n\r\n  return (\r\n    <CountryOutRangePoint\r\n      onClick={() => setSelectedCountry(country.Country)}\r\n      key={country.Country}\r\n      id={country.Country}\r\n      x={xScale(xValue)}\r\n      y={yScale(yValue)}\r\n      direction={direction}\r\n    />\r\n  )\r\n}\r\n\r\nconst getOutSelectedRangeRender = ( getValue, getTotal, xmax, ymax, xScale, yScale, setSelectedCountry ) => country => {\r\n  let direction = ''\r\n  let yValue = getValue(country);\r\n  if (yValue > ymax) {\r\n    direction += \"S\";\r\n    yValue = ymax;\r\n  }\r\n\r\n  let xValue = getTotal(country);\r\n  if (xValue > xmax) {\r\n    direction += \"E\";\r\n    xValue = xmax;\r\n  }\r\n\r\n  return (\r\n    <SelectedCountryOutRangePoint\r\n      onClick={() => setSelectedCountry(null)}\r\n      key={country.Country}\r\n      id={country.Country}\r\n      x={xScale(xValue)}\r\n      y={yScale(yValue)}\r\n      direction={direction}\r\n    />\r\n  )\r\n}\r\n\r\nexport default function BubbleChart(props) {\r\n  const {\r\n    selectedCountry,\r\n    countries,\r\n    setSelectedCountry,\r\n    measureX,\r\n    measureY,\r\n    axisXName,\r\n    axisYName,\r\n  } = props;\r\n\r\n  const getTotal = country => country.covidData[country.covidData.length - 1][measureX] / (country.population / 100000)\r\n  const getValue = country => country[measureY];\r\n\r\n  let countiesForRender = [].concat(countries);\r\n\r\n  countiesForRender.sort((a, b) => {\r\n    if (getTotal(a) > getTotal(b)) return 1;\r\n    if (getTotal(b) > getTotal(a)) return -1;\r\n    return 0;\r\n  })\r\n\r\n  const topTotal5 = [countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop()];\r\n\r\n  countiesForRender.sort((a, b) => {\r\n    if (getValue(a) > getValue(b)) return 1;\r\n    if (getValue(b) > getValue(a)) return -1;\r\n    return 0;\r\n  })\r\n  const topValue5 = [countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop(),\r\n    countiesForRender.pop()];\r\n\r\n  const outRange = [].concat(topTotal5, topValue5)\r\n  const data = countiesForRender;\r\n\r\n  const yScale = d3.scaleLinear().rangeRound([CHART_HEIGHT, 0]);\r\n\r\n  const xScale = d3.scaleTime().range([0, CHART_WIDTH]);\r\n  let [xmin, xmax] = d3.extent(data, getTotal);\r\n  xmax *=1.0;\r\n  xScale.domain([xmin, xmax]);\r\n\r\n  let [ymin, ymax] = d3.extent(data, getValue);\r\n  ymax *=1.0;\r\n  yScale.domain([ymin, ymax]);\r\n\r\n  let selected = null;\r\n  let selectedOutRange = null;\r\n\r\n  if (selectedCountry) {\r\n    selected = data.find(country => country.Country === selectedCountry);\r\n    selectedOutRange = outRange.find(country => country.Country === selectedCountry);\r\n  }\r\n\r\n  const renderOutCountry = getOutRangeRender(getValue, getTotal, xmax, ymax, xScale, yScale, setSelectedCountry);\r\n  const renderSelectedOutCountry = getOutSelectedRangeRender(getValue, getTotal, xmax, ymax, xScale, yScale, setSelectedCountry);\r\n\r\n  return (\r\n    <svg width={BUBBLE_CHART_WIDTH} height={BUBBLE_CHART_HEIGHT}>\r\n      <g transform=\"translate(110, 10)\">\r\n        <g transform={`translate(0, ${CHART_HEIGHT})`}>\r\n          <AxisX domain={[xmin, xmax]} range={[0, CHART_WIDTH]} name={axisXName}/>\r\n        </g>\r\n        <g transform={`translate(0, 0)`}>\r\n          <AxisY domain={[ymin, ymax]} range={[CHART_HEIGHT, 0]} name={axisYName}/>\r\n        </g>\r\n        {countiesForRender.map(country => (\r\n          <CountryPoint onClick={() => setSelectedCountry(country.Country)}\r\n                        key={country.Country}\r\n                        id={country.Country}\r\n                        x={xScale(getTotal(country))}\r\n                        y={yScale(getValue(country))}\r\n          />\r\n        ))}\r\n        {selected && <>\r\n          <SelectedCountryPoint key={selected.Country}\r\n                                onClick={() => setSelectedCountry(null)}\r\n                                x={xScale(getTotal(selected))}\r\n                                y={yScale(getValue(selected))}\r\n          />\r\n          <CountryDetails country={selected.Country}\r\n                          x={xScale(getTotal(selected)) - 7}\r\n                          y={yScale(getValue(selected))}\r\n                          total={getTotal(selected)}\r\n                          value={getValue(selected)}/>\r\n        </>\r\n        }\r\n        {/* render out rangers */}\r\n\r\n        {outRange.map(renderOutCountry)}\r\n        {selectedOutRange && <>\r\n          {renderSelectedOutCountry(selectedOutRange)}\r\n          <CountryDetails country={selectedOutRange.Country}\r\n                          x={xScale(Math.min(getTotal(selectedOutRange), xmax)) - 7}\r\n                          y={yScale(Math.min(getValue(selectedOutRange), ymax))}\r\n                          total={getTotal(selectedOutRange)}\r\n                          value={getValue(selectedOutRange)}/>\r\n        </>\r\n        }\r\n      </g>\r\n    </svg>\r\n\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport BubbleChart from \"./BubbleChart\";\r\nimport {BUBBLE_CHART_HEIGHT, BUBBLE_CHART_WIDTH} from \"./chartConstants\";\r\n\r\nconst chardContainerStyle = {\r\n  minHeight: BUBBLE_CHART_HEIGHT,\r\n  height: BUBBLE_CHART_HEIGHT,\r\n  width: BUBBLE_CHART_WIDTH,\r\n  minWidth: BUBBLE_CHART_WIDTH,\r\n  margin: 5,\r\n}\r\n\r\nexport default function Charts(props) {\r\n  return (\r\n    <div className='charts-column'>\r\n      <div className='charts-row'>\r\n        <div style={chardContainerStyle}>\r\n          <BubbleChart\r\n            {...props}\r\n            measureX=\"Deaths\"\r\n            axisXName=\"Total deaths per 100k\"\r\n            measureY=\"GDP\"\r\n            axisYName=\"GDP\"\r\n          />\r\n        </div>\r\n        <div style={chardContainerStyle}>\r\n          <BubbleChart\r\n            {...props}\r\n            measureY=\"GDP\"\r\n            axisYName=\"GDP\"\r\n            measureX=\"Confirmed\"\r\n            axisXName=\"Total confirmed cases per 100k\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className='charts-row'>\r\n        <div style={chardContainerStyle}>\r\n          <BubbleChart\r\n            {...props}\r\n            measureY=\"Density\"\r\n            axisYName=\"Population density, km²\"\r\n            measureX=\"Deaths\"\r\n            axisXName=\"Total deaths per 100k\"\r\n          />\r\n        </div>\r\n        <div style={chardContainerStyle}>\r\n          <BubbleChart\r\n            {...props}\r\n            measureY=\"Density\"\r\n            axisYName=\"Population density, km²\"\r\n            measureX=\"Confirmed\"\r\n            axisXName=\"Total confirmed cases per 100k\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\n\nimport './App.css';\nimport countryData from \"./data/filtered-country-data.json\"\nimport CountryList from \"./components/CountryList\";\nimport {addMaxMetadataToCountries, getMaxValues} from \"./components/chartsUtil\";\nimport Charts from \"./components/Charts\";\n\nconst sorted = countryData\n    .filter( c => c.Country !== \"United Kingdom\"\n        && c.Country !== \"Monaco\"\n       )\n    .sort((a, b) =>{\n        if (a.Country > b.Country) return 1;\n        if (b.Country > a.Country) return -1;\n        return 0;\n    })\n\nconst preparedCountryData = addMaxMetadataToCountries(sorted);\nconst chartMaxMetadata = getMaxValues(preparedCountryData);\n\nfunction App() {\n    const [selectedCountry, setSelectedCountry] = useState(null);\n    return (\n        <div className=\"App\">\n            <CountryList\n                countries={preparedCountryData}\n                maxValues={chartMaxMetadata}\n                setSelectedCountry={setSelectedCountry}\n                selectedCountry={selectedCountry}\n            />\n            <Charts\n                countries={preparedCountryData}\n                maxValues={chartMaxMetadata}\n                setSelectedCountry={setSelectedCountry}\n                selectedCountry={selectedCountry}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}